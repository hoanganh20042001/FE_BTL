{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\HoangAnh\\\\OneDrive\\\\M\\xE1y t\\xEDnh\\\\New folder (2)\\\\BKlock\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"C:\\\\Users\\\\HoangAnh\\\\OneDrive\\\\M\\xE1y t\\xEDnh\\\\New folder (2)\\\\BKlock\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\HoangAnh\\\\OneDrive\\\\M\\xE1y t\\xEDnh\\\\New folder (2)\\\\BKlock\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { useState } from 'react';\nimport { isFormList, formList } from './form-list/form-list.js';\nimport { validateValues, validateFieldValue } from './validate-values/validate-values.js';\nimport { filterErrors } from './filter-errors/filter-errors.js';\nimport { getInputOnChange } from './get-input-on-change/get-input-on-change.js';\nimport { getErrorPath } from './get-error-path/get-error-path.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nfunction useForm(_ref) {\n  var initialValues = _ref.initialValues,\n    initialErrors = _ref.initialErrors,\n    rules = _ref.validate,\n    schema = _ref.schema;\n  var _useState = useState(filterErrors(initialErrors)),\n    _useState2 = _slicedToArray(_useState, 2),\n    errors = _useState2[0],\n    setErrors = _useState2[1];\n  var _useState3 = useState(initialValues),\n    _useState4 = _slicedToArray(_useState3, 2),\n    values = _useState4[0],\n    setValues = _useState4[1];\n  var clearErrors = function clearErrors() {\n    return setErrors({});\n  };\n  var setFieldError = function setFieldError(field, error) {\n    return setErrors(function (current) {\n      return __spreadProps(__spreadValues({}, current), _defineProperty({}, field, error));\n    });\n  };\n  var clearFieldError = function clearFieldError(field) {\n    return setErrors(function (current) {\n      var clone = __spreadValues({}, current);\n      delete clone[field];\n      return clone;\n    });\n  };\n  var setFieldValue = function setFieldValue(field, value, errorPath) {\n    setValues(function (currentValues) {\n      return __spreadProps(__spreadValues({}, currentValues), _defineProperty({}, field, value));\n    });\n    clearFieldError(errorPath || field);\n  };\n  var setListItem = function setListItem(field, index, value, errorPath) {\n    var list = values[field];\n    if (isFormList(list) && list[index] !== void 0) {\n      var cloned = _toConsumableArray(list);\n      cloned[index] = value;\n      setFieldValue(field, formList(cloned), errorPath);\n    }\n  };\n  var removeListItem = function removeListItem(field, indices) {\n    var list = values[field];\n    if (isFormList(list)) {\n      setFieldValue(field, formList(list.filter(function (_, index) {\n        return Array.isArray(indices) ? !indices.includes(index) : indices !== index;\n      })));\n    }\n  };\n  var addListItem = function addListItem(field, payload) {\n    var list = values[field];\n    if (isFormList(list)) {\n      setFieldValue(field, formList([].concat(_toConsumableArray(list), [payload])));\n    }\n  };\n  var reorderListItem = function reorderListItem(field, _ref2) {\n    var from = _ref2.from,\n      to = _ref2.to;\n    var list = values[field];\n    if (isFormList(list) && list[from] !== void 0 && list[to] !== void 0) {\n      var cloned = _toConsumableArray(list);\n      var item = list[from];\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n      setFieldValue(field, formList(cloned));\n    }\n  };\n  var validate = function validate() {\n    var results = validateValues(schema || rules, values);\n    setErrors(results.errors);\n    return results;\n  };\n  var validateField = function validateField(field) {\n    var results = validateFieldValue(field, schema || rules, values);\n    results.hasError ? setFieldError(field, results.error) : clearFieldError(field);\n    return results;\n  };\n  var onSubmit = function onSubmit(handleSubmit) {\n    return function (event) {\n      event.preventDefault();\n      var results = validate();\n      !results.hasErrors && handleSubmit(values, event);\n    };\n  };\n  var reset = function reset() {\n    setValues(initialValues);\n    clearErrors();\n  };\n  var getInputProps = function getInputProps(field) {\n    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      type = _ref3.type,\n      _ref3$withError = _ref3.withError,\n      withError = _ref3$withError === void 0 ? true : _ref3$withError;\n    var value = values[field];\n    var onChange = getInputOnChange(function (val) {\n      return setFieldValue(field, val);\n    });\n    var payload = type === \"checkbox\" ? {\n      checked: value,\n      onChange: onChange\n    } : {\n      value: value,\n      onChange: onChange\n    };\n    if (withError && errors[field]) {\n      payload.error = errors[field];\n    }\n    return payload;\n  };\n  var getListInputProps = function getListInputProps(field, index, listField) {\n    var _ref4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      type = _ref4.type,\n      _ref4$withError = _ref4.withError,\n      withError = _ref4$withError === void 0 ? true : _ref4$withError;\n    var list = values[field];\n    if (isFormList(list) && list[index] && listField in list[index]) {\n      var listValue = list[index];\n      var value = listValue[listField];\n      var listItemErrorPath = getErrorPath([field, index, listField]);\n      var onChange = getInputOnChange(function (val) {\n        return setListItem(field, index, __spreadProps(__spreadValues({}, listValue), _defineProperty({}, listField, val)), listItemErrorPath);\n      });\n      var payload = type === \"checkbox\" ? {\n        checked: value,\n        onChange: onChange\n      } : {\n        value: value,\n        onChange: onChange\n      };\n      var error = errors[getErrorPath([field, index, listField])];\n      if (withError && error) {\n        payload.error = error;\n      }\n      return payload;\n    }\n    return {};\n  };\n  return {\n    values: values,\n    setValues: setValues,\n    setFieldValue: setFieldValue,\n    errors: errors,\n    setErrors: setErrors,\n    clearErrors: clearErrors,\n    clearFieldError: clearFieldError,\n    setFieldError: setFieldError,\n    setListItem: setListItem,\n    removeListItem: removeListItem,\n    addListItem: addListItem,\n    reorderListItem: reorderListItem,\n    validate: validate,\n    validateField: validateField,\n    onSubmit: onSubmit,\n    reset: reset,\n    getInputProps: getInputProps,\n    getListInputProps: getListInputProps\n  };\n}\nexport { useForm };","map":null,"metadata":{},"sourceType":"module"}